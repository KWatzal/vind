allprojects {
    if (name in ['backend','demo','report','server','utils']) {
        logger.info("Skipping aggregate project {}", name)
        return
    }

    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'signing'

    group = group
    version = version

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
        maven {
            url "http://repo.spring.io/plugins-release"
        }
    }

    dependencies {
        compile("org.slf4j:slf4j-api:$slf4jVersion")
        compile("com.google.guava:guava:$guavaVersion")

        testCompile "junit:junit:$junitVersion"
        testCompile "org.hamcrest:hamcrest-library:$hamcrestLibraryVersion"
        testCompile("org.slf4j:slf4j-simple:$slf4jVersion")
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.build.dependsOn(sourcesJar)
    tasks.build.dependsOn(javadocJar)

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        //required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                configuration = configurations.archives
                snapshotRepository(url: snapshotRepositoryURL) {
                    authentication(userName: ossrhRepositoryUsername, password: ossrhRepositoryPassword)
                }
                repository(url: releaseRepositoryURL ) {
                    authentication(userName: ossrhRepositoryUsername, password: ossrhRepositoryPassword)
                }
                pom.project {
                    packaging 'jar'
                    description 'Vind is build to enable the integration of search facilities in java projects without getting to deep into the search topic'
                    url 'https://rbmhtechnology.github.io/vind/'

                    properties {
                        'timestamp' String.valueOf(System.currentTimeMillis())
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    scm {
                        connection 'scm:git:https://github.com/RBMHTechnology/vind.git'
                        developerConnection 'scm:git:git@github.com:RBMHTechnology/vind.git'
                        url 'https://github.com/RBMHTechnology/vind'
                    }
                }
            }
        }
    }

}


task aggregatedJavadoc(type: Javadoc) {
    group = 'aggregation'

    title = "$project.name $project.version API"
    destinationDir = file("docs/javadoc")

    def sourceProjects = subprojects.findAll { it.plugins.hasPlugin('java') && !it.name.startsWith("demo-")}
    source sourceProjects.collect { it.sourceSets.main.allJava }
    classpath = files(sourceProjects.collect { it.sourceSets.main.runtimeClasspath })

    options.showFromProtected()
    options.windowTitle = "$project.name - $project.version - API"

}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

apply plugin: 'org.asciidoctor.convert'

asciidoctor {

    sourceDir = file('docs/markdown')
    sources {
        include '*.md'
    }
    outputDir = file('docs')
    attributes 'source-highlighter': 'prettify',
            'imagesdir': 'docs/images',
            toc: 'left',
            icons: 'font',
            linkattrs: true,
            encoding: 'utf-8',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true'
}

tasks.build.dependsOn(aggregatedJavadoc)
