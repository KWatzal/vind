options {
  LOOKAHEAD = 20;
}

PARSER_BEGIN(QueryParser)

package com.rbmhtechnology.vind.parser.queryparser;

import org.apache.commons.lang3.StringUtils;

public class QueryParser {
    public Query run() throws ParseException {
        return query();
    }
};

PARSER_END(QueryParser)
SKIP : {
    <" " | "\t" | "\n" | "\r" >
}
TOKEN :
{
  <AND:              (("a" | "A")("n" | "N")("d" | "D")) | "&">
| <OR:               (("o"|"O")("r" | "R")) | "|">
| <NOT:              (("n"|"N")("o"|"O")("t"|"T")) | "!">
| <PLUS:             "+">
| <MINUS:            "-" >
| <LPAREN:           "(">
| <RPAREN:           ")">
| <LBRACKET:         "[">
| <RBRACKET:         "]">
//| <DATE_TERM:        ((["0"-"2"]<NUMBER>)|("3"["0","1"]))"-"("0"["1"-"9"]|"1"["0"-"2"])"-"(<NUMBER>){4}  >
| <NUMBER_TERM:      (["+","-"])? ( (<NUMBER>)+ ("."(<NUMBER>)*)? ) (["e","E"](<NUMBER>)+)? >
| <FIELD:            (["0"-"9","A"-"Z","a"-"z","_","-","."])+ ":" >
| <QUOTE:           "\"">
| <QUOTED_STRING:   <QUOTE> (~["\""])+ <QUOTE> >
| <WILDCARD:        "*">
| <TO:              "TO">
| <TERM:             (["0"-"9","A"-"Z","a"-"z","_","-","\u0080"-"\uffff"])+ >
| <NUMBER:           ["0"-"9"]>
}

Query query() :
{Query q = new Query();Clause c;Token value;}
{
    ((<LPAREN> c=clause(){q.add(c);}<RPAREN>) | c=clause(){q.add(c);})*
    (value=<TERM>{q.addText(value.image);}
    | value=<QUOTED_STRING>{q.addText(value.image);}
    | value=<AND>{q.addText(value.image);}
    | value=<OR>{q.addText(value.image);}
    | value=<NOT>{q.addText(value.image);}
    | value=<MINUS> {q.addText(value.image);}
    | value=<PLUS> {q.addText(value.image);}
    | value=<WILDCARD> {q.addText(value.image);}
    | value=<NUMBER_TERM> {q.addText(value.image);}
    )*
    { return q;}
}

Clause clause() :
{Clause clause;}
{
    ( clause=booleanClause() | clause=fieldClause() )
    {return clause;}
}

FieldClause fieldClause() :
{BooleanLiteral query = null;boolean negated = false;Token field = null;SimpleLiteral value = null;}
{
    (<PLUS> | <MINUS>{negated=true;})?
    field=<FIELD>
    (value=simpleLiteral() | ( query=booleanLiteral() ))
      {
        String fieldName = field == null ? null : StringUtils.chop(field.image);
        return query == null ?
            new SimpleTermClause(negated, fieldName, value) :
            new ComplexTermClause(negated, fieldName, query);
      }
}
SimpleLiteral simpleLiteral() :
{SimpleLiteral literal;}
{
    ( literal=rangeLiteral() | literal=termsLiteral() )
    {return literal;}
}
TermsLiteral termsLiteral() :
{TermsLiteral l = new TermsLiteral();Token value;}
{
    ( value=<TERM>{l.add(value.image);}
    | value=<QUOTED_STRING>{l.add(value.image);}
    | value=<NUMBER_TERM> {l.add(value.image);}
    | ( <LPAREN>
        (value=<TERM>{l.add(value.image);} |
         value=<QUOTED_STRING>{l.add(value.image);} |
         value=<NUMBER_TERM> {l.add(value.image);})+ <RPAREN>
        ))

    { return l;}
}

BooleanLiteral booleanLiteral() :
{BooleanLiteral literal;}
{   (literal=unaryBooleanLiteral() | literal=binaryBooleanLiteral() | literal=booleanLeafValue())
    { return literal; }
}

BooleanLiteral unaryBooleanLiteral() :
{BooleanLiteral literal;Token op;}
{
    (op=<NOT> | op=<MINUS> ) (literal=booleanLiteral() )
    { return new UnaryBooleanLiteral(op.image, literal);}
}

BooleanLiteral binaryBooleanLiteral() :
{BooleanLiteral left;BooleanLiteral right;Token op;BinaryBooleanLiteral baseClause;}
{
    <LPAREN>
     (left=booleanLiteral() ) ( op=<AND> | op=<OR> ) (right=booleanLiteral() )
     {baseClause = new BinaryBooleanLiteral(op.image, left, right);}
     (( op=<AND> | op=<OR> ) ( right=booleanLiteral() ) {baseClause.addClause(op.image, right);})*
     <RPAREN>
    { return baseClause; }
}

BooleanLiteral booleanLeafValue():
{Token value;}
{
    ( value=<TERM> | value=<QUOTED_STRING>)
    {return new BooleanLeafLiteral(value.image);}
}

RangeLiteral rangeLiteral() :
{RangeLiteral range;}
{
   (range=numericRangeLiteral() | range=dateRangeLiteral() )
    {return range;}
}

NumericRangeLiteral numericRangeLiteral() :
{Token from;Token to;}
{
    <LBRACKET> ( from=<NUMBER_TERM> | from=<WILDCARD> ) <TO> ( to=<NUMBER_TERM> | to=<WILDCARD> ) <RBRACKET>
    {return new NumericRangeLiteral(from.image, to.image);}
}

DateRangeLiteral dateRangeLiteral() :
{Token from;Token to;}
{
    <LBRACKET> ( from=<TERM> | from=<WILDCARD> ) <TO> ( to=<TERM> | to=<WILDCARD> ) <RBRACKET>
    {return new DateRangeLiteral(from.image, to.image);}
}

BooleanClause booleanClause() :
{BooleanClause clause;}
{
    (clause=unaryBooleanClause() | clause=binaryBooleanClause())
    {return clause;}
}

BooleanClause unaryBooleanClause() :
{Clause clause;Token op;}
{
    (op=<NOT>) ((clause=clause())|(<LPAREN> clause=clause() <RPAREN> ))
    { return new UnaryBooleanClause(op.image, clause);}
}

BooleanClause binaryBooleanClause() :
{Clause left;Clause right;Token op;BinaryBooleanClause mainClause;}
{
    ((left=fieldClause() | left=unaryBooleanClause() |<LPAREN> left=binaryBooleanClause()<RPAREN> )
    (op=<AND> | op=<OR> )
    (right=fieldClause() | right=unaryBooleanClause() |<LPAREN> right=binaryBooleanClause()<RPAREN> )
    {mainClause=new BinaryBooleanClause(op.image, left, right);}
    (( op=<AND> | op=<OR> ) ( right=clause())
    {mainClause.addClause(op.image, right);})*)
    { return mainClause;}
}

