options {
  LOOKAHEAD = 1;
}

PARSER_BEGIN(QueryParser)

package com.rbmhtechnology.vind.parser.queryparser;

import org.apache.commons.lang3.StringUtils;

public class QueryParser {
    public Query run() throws ParseException {
        return query();
    }
};

PARSER_END(QueryParser)
SKIP : {
    <" " | "\t" | "\n" | "\r" >
}
TOKEN :
{
  <AND:              "AND">
| <OR:               "OR">
| <NOT:              ("NOT" | "!")>
| <PLUS:             "+">
| <MINUS:            "-" >
//| <WS :              " " | "\t" | "\n" | "\r" >
| <LBRACKET:         "(">
| <RBRACKET:         ")">
| <TERM:             (["0"-"9","A"-"Z","a"-"z","_","-","\u0080"-"\uffff"])+ >
| <FIELD:             (["0"-"9","A"-"Z","a"-"z","_","-"])+ ":" >
| <QUOTE:           "\"">
| <QUOTED_STRING:   <QUOTE> (~["\""])+ <QUOTE> >
}

Query query() :
{Query q = new Query();Clause c;}
{
    c=clause(){q.add(c);}
    (c=clause(){q.add(c);})*<EOF>
    {return q;}
}

Clause clause() :
{Query query = null;boolean negated = false;Token field = null;Literal value = null;}
{
    ((<PLUS> |  {negated=true;} <MINUS> ))?
    (field=<FIELD>)?
    (
        value=literal() | ( <LBRACKET> query=query() <RBRACKET> )
    )
  {
    String fieldName = field == null ? null : StringUtils.chop(field.image);
    return query == null ?
        new SimpleTermClause(negated, fieldName, value != null ? value : null) :
        new ComplexTermClause(negated, fieldName, query);}
}

Literal literal() :
{Literal l = new Literal();Token value;}
{
    (value=<TERM>{l.add(value.image);} | value=<QUOTED_STRING>{l.add(value.image);})+
    {return l;}
}
